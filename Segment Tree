struct SegmentTree {  //ê³±ì…ˆ
    int n, arr[100000], seg[400001];

    SegmentTree(int n) : n(n) {}

    int simplify(int n) {
        if (n > 0)
            return 1;
        else if (n < 0)
            return -1;
        else
            return 0;
    }

    void init() {
        init(1, 0, n - 1);
    }

    void update(int a, int b) {
        arr[a - 1] = simplify(b);
        update(1, 0, n - 1, a - 1);
    }

    void sum(int a, int b) {
        putchar("-0+"[sum(1, 0, n - 1, a - 1, b - 1) + 1]);
    }

    int init(int node, int start, int end) {
        if (start == end)
            return seg[node] = simplify(arr[end]);

        int mid = (start + end) / 2;

        return seg[node] = init(node * 2, start, mid) * init(node * 2 + 1, mid + 1, end);
    }

    int update(int node, int start, int end, int target) {
        if (start == end)
            return seg[node] = arr[end];

        int mid = (start + end) / 2;

        if (target > mid)
            seg[node] = seg[node * 2] * update(node * 2 + 1, mid + 1, end, target);
        else
            seg[node] = update(node * 2, start, mid, target) * seg[node * 2 + 1];

        return seg[node];
    }

    int sum(int node, int start, int end, int from, int to) {
        if (from > end || to < start)
            return 1;

        if (from <= start && end <= to)
            return seg[node];

        int mid = (start + end) / 2;

        return sum(node * 2, start, mid, from, to) * sum(node * 2 + 1, mid + 1, end, from, to);
    }
};
