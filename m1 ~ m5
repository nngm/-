#include <bits/stdc++.h>
#define FOR(N) for(int i = 0; i < N; i++)

#define m5

using namespace std;

#ifdef m1
int main()
{
    int n, m, cnt = 0, note[50000] = {0, }, qst[10000];

    cin >> n >> m;
    for (int i = 0; i < n; i++) {
        int tmp;
        scanf("%d", &tmp);
        note[i] = cnt += tmp;
    }

    for (int i = 0; i < m; i++)
        scanf("%d", qst + i);

        FOR(n)  printf("%d ", note[i]);
        cout << endl;

    for (int i = 0; i < m; i++)
        printf("%d\n", upper_bound(note, note + n, qst[i]) - note + 1);

    return 0;
}
#endif // m1

#ifdef m2 // measure

#define min(a, b) (a < b ? a : b)

void fold(double&, double);

int main()
{
    double length, r1, r2, b1, b2, y1, y2, start = 0, r, b, y;

    cin >> length >> r1 >> r2 >> b1 >> b2 >> y1 >> y2;

    if (b1 > b2)
        swap(b1, b2);
    if (y1 > y2)
        swap(y1, y2);

    if (r1 - r2) {
        r = ((double) r1 + r2) / 2;

        fold(b1, r);
        fold(b2, r);
        fold(y1, r);
        fold(y2, r);

        if (y1 > y2)
            swap(y1, y2);

        if (r - start > length - r)
            r = start + length - r;
        start = r;
    }

    if (b1 - b2) {
        b = ((double) b1 + b2) / 2;

        fold(y1, b);
        fold(y2, b);

        if (b - start > length - b)
            b = start + length - b;
        start = b;
    }

    if (y1 - y2) {
        y = ((double) y1 + y2) / 2;

        if (y - start > length - y)
            y = start + length - y;
        start = y;
    }

    printf("%.1lf", length - start);

    return 0;
}

void fold (double &a, double k)
{
    if (a < k)
        a = 2 * k - a;
}
#endif // m2

#ifdef m3 // josephus
struct Node {
    int value;
    Node *next;
};

Node* addNode(Node* cur) {
    return cur->next = new Node();
}

int main()
{
    int n, m, k;
    cin >> n >> m >> k;

    Node *head = (Node*) malloc(sizeof(Node));
    Node *cur = head;

    cur->value = 1;

    for (int i = 2; i <= n; i++) {
        cur = addNode(cur);
        cur->value = i;
    }

    cur->next = head;

    for (int i = 1; i < m; i++)
        cur = cur->next;

    printf("%d ", cur->next->value);
    cur->next = cur->next->next;

    while(cur != cur->next) {
        for (int i = 1; i < k; i++)
            cur = cur->next;

        printf("%d ", cur->next->value);
        cur->next = cur->next->next;
    }

    printf("%d ", cur->next->value);

    return 0;
}
#endif // m3

#ifdef m4 // catch_cow
struct Step {
    int point;
    int time;
};

int main()
{
    int n, k, arr[200001] = {0, };
    queue<Step> queue;

    cin >> n >> k;
    arr[n]++;

    Step temp;
    temp.point = n;
    temp.time = 0;
    queue.push(temp);

    while (queue.front().point != k)  {
        Step tmp = queue.front();
        queue.pop();
        bool bz = tmp.point > 0, bk = tmp.point < k;

        tmp.time++;
        if (bz && !arr[tmp.point - 1]) {
            tmp.point--;
            queue.push(tmp);
            arr[tmp.point++]++;
        }
        if (bk && !arr[tmp.point + 1]) {
            tmp.point++;
            queue.push(tmp);
            arr[tmp.point--]++;
        }
        if (bz && bk && !arr[2 * tmp.point]) {
            tmp.point *= 2;
            queue.push(tmp);
            arr[tmp.point]++;
        }
    }   // end of while

    cout << queue.front().time;

    return 0;
}
#endif // m4

#ifdef m5 // prime_path
struct No {
    int num;
    int step;

    No (int n, int b)  {
        num = n;
        step = b;
    }
};

int combine(int, int, int, int);
bool isPrime(int);

int main()
{
    int startNum, endNum, arr[10000] = {0, };
    queue<No> queue;

    cin >> startNum >> endNum;

    No start(startNum, 0);

    queue.push(start);

    while (queue.front().num != endNum) {
        No tmp = queue.front();
        queue.pop();
        if (arr[tmp.num]++ != 0)
            continue;

        int a = tmp.num / 1000;
        int b = tmp.num / 100 % 10;
        int c = tmp.num / 10 % 10;
        int d = tmp.num % 10;

        for (int i = 1; i < 10; i++)
            if (isPrime(combine(i, b, c, d)))   {
                No temp(combine(i, b, c, d), tmp.step + 1);
                queue.push(temp);
            }

        for (int i = 0; i < 10; i++)
            if (isPrime(combine(a, i, c, d)))   {
                No temp(combine(a, i, c, d), tmp.step + 1);
                queue.push(temp);
            }

        for (int i = 0; i < 10; i++)
            if (isPrime(combine(a, b, i, d)))   {
                No temp(combine(a, b, i, d), tmp.step + 1);
                queue.push(temp);
            }

        for (int i = 1; i < 10; i += 2)
            if (isPrime(combine(a, b, c, i)))   {
                No temp(combine(a, b, c, i), tmp.step + 1);
                queue.push(temp);
            }
    }

    cout << queue.front().step;

    return 0;
}

int combine(int a, int b, int c, int d)
{
    return a * 1000 + b * 100 + c * 10 + d;
}

bool isPrime(int n)
{
    if (n < 2)
        return false;
    if (n == 2)
        return true;
    if (n % 2 == 0)
        return false;

    for (int i = 3; i * i <= n; i += 2)
        if (n % i == 0)
            return false;

    return true;
}
#endif // m5
